I. Подготовительный этап.
    1. В Классе ConfigReader считываются входящие парметры инициализации. Там же они валидируются
    на некорректные значения.
    2. В Классе Runner создается объект Класса Building, который в свою очередь конструирует
    Коллекцию этажей.
    3. Создаются объекты Классов Elevator и ElevatorController.
    4. Через Класс CreatorListPassengers создается Коллеция пассажиров, которым присваивается в случайном порядке
    начальный этаж и этаж назначения.


II. Этап перемещения пассажиров.
    1. Запускается лифт. За перемещение лифта, посадку и высадку пассажиров отвечает Класс ElevatorController.
    Перемещение лифта осуществляется в методе moveElevator(). Данный Класс имеет два логических поля
    boolean isFullQueueToElevator и boolean isFullQueueFromElevator, которые хранят соответственно
    состояния наличия очередей на вход в лифт и выход.
    2. При перемещение на новый этаж предполагается, что, если в кабине лифта есть пассажиры, то, возможно,
    кто-то из них желает выйти на текущем этаже. Это отражается в следующем коде:

    if (!elevator.getElevatorContainer().isEmpty()) {
                    isFullQueueFromElevator = true;
                }

    А потому нужно задержать лифт пока пассажиры не выйдут из лифта и не войдут в лифт новые.
    3. Сигнализируем пассажирам о том, что, если текущий этаж совпадает с их этажом назанчения, то они могут
    выйти:

    leaveElevatorPermission.signalAll();

    4. Для выхода из лифта есть метод deboadingPassenger(Passenger passenger),
    который вызывается ассоциируемым потоком (Transportation Task) каждого пассажира, как только он
    начинает свое перемещение в лифте. Если текущий этаж и этаж назанчения пассажира не совпадают,
    поток "засыпает" на данном условии.
    5. Если текущий этаж совпадает с этажом назанчения, пассажир покидает кабину лифта и добавляется
    в контейнер прибытия
    6. После этого в методе createListTransportationTaskOnFloor() создаются Transportation Tasks, у пассажиров
    которых, направление перемещения совпадает с направлением движения лфита, при условии, что
    в кабине лифта есть свободное место.
    7. После выполнения п.5 и п.6 очереди на выход из лифта и вход в него, отмечаем пустыми, что соответствует:

     isFullQueueFromElevator = false;
     isFullQueueToElevator = false;

    соответсвенно.
    8. После этого лифт перемещается на следующий этаж с помощью метода void goNextFloor().
    9. Как только не останется пассажиров в контейнерах отправления, и кабина лифта будет пуста,
    лифт завершает свою работу.

III. Процесс валидации перевозки.
    1. За валидацию результатов отвечает Класс ValidationResults.
    2. void validateDispatchFloorContainer(List<Floor> floors): определяет пусты ли контейнеры отправления
    на этажах.
    3. void validateElevatorContainer(Elevator elevator): определяет пуста ли кабина лифта после завершения
    процесса перевозки
    4. void validateTransportationState(List<Floor> floors): определяет у всех ли пассажиров при прибытии
    на этаж назначения устанавливается  Transportation State COMPLETED.
    5. void validateDestinationFloor(List<Floor> floors): определяет у всех ли пассажиров этаж назначения
    равен этажу прибытия.
    6.void validateWhetherAllArrived(List<Floor> floors, int passengerNumber): определяет равенство
    пассажиров, созданных в приложении с количество пассжиров, перевезенных лифтом.



